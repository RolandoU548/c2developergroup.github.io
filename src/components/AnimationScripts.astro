---

---

<script>
  let __element_c2animate: Element[] = [];
  let __element_c2animate_parent: Element[] = [];
  let animationObserverTree: Map<Element, Element[]> = new Map();
  let __observers: Map<number, IntersectionObserver> = new Map();

  const onIntersect = (
    entries: IntersectionObserverEntry[],
    observer: IntersectionObserver
  ) => {
    let i = 0;
    for (const entry of entries) {
      if (entry.isIntersecting) {
        console.debug(`entry ${i} +INTERSECTING`, entry);
        for (const animatedChild of animationObserverTree.get(entry.target) ??
          []) {
          animatedChild.classList.add("c2animate-visible");
        }
        console.debug(`entry ${i} -OBSERVING`, entry);
        observer.unobserve(entry.target);
      } else {
        console.debug(`entry ${i} -INTERSECTING`, entry);
      }
      i++;
    }
  };

  const init = () => {
    __element_c2animate_parent = [
      ...document.getElementsByClassName("c2animate-parent")!!,
    ];
    for (const parent of __element_c2animate_parent) {
      let animatedChildren = [...parent.getElementsByClassName("c2animate")!!];
      __element_c2animate.push(...animatedChildren);
      animationObserverTree.set(parent, animatedChildren);

      let threshold = Number(
        (parent as HTMLElement).dataset.intersectionThreshold
      );

      console.debug(
        `Animations: _c2animate_parent(threshold=${threshold})`,
        parent
      );

      if (!__observers.has(threshold)) {
        __observers.set(
          threshold,
          new IntersectionObserver(onIntersect, {
            root: null,
            rootMargin: "0px",
            threshold: threshold,
          })
        );
      }
    }
    console.debug("Animations: _c2animate", __element_c2animate);

    for (const element of __element_c2animate) {
      element.classList.add("c2animate-init");
    }
    console.debug("Animations: class init");

    window.requestAnimationFrame(() => {
      for (const element of __element_c2animate) {
        element.classList.add("c2animate-start");
      }
      for (const parent of __element_c2animate_parent) {
        __observers
          .get(Number((parent as HTMLElement).dataset.intersectionThreshold))!!
          .observe(parent);
      }
      console.debug("Animations: transition init");
    });
  };

  document.addEventListener("DOMContentLoaded", (_event) => {
    console.debug("Animations: DOMContentLoaded");
    init();
  });
</script>
